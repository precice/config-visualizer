#! /usr/bin/env python

from lxml import etree
import pydot
import argparse
import sys
from itertools import cycle

if sys.version_info < (3, 6):
    raise RuntimeError(
        "This program requires python 3.6 or later but you attempted to run it"
        " with python {}.{}".format(
            sys.version_info.major. sys.version_info.minor
        ))


def quote(text):
    return f'"{text}"'


def parseXML(content):
    p = etree.XMLParser(recover=True, remove_comments=True)
    return etree.fromstring(content, p)


def parseXMLFile(file):
    return parseXML(open("precice.xml", "rb").read())


def addNode(g, name, **attrs):
    n = pydot.Node(quote(name), **attrs)
    g.add_node(n)
    return n


def addEdge(g, src, dst, **attrs):
    e = pydot.Edge(quote(src), quote(dst), **attrs)
    g.add_edge(e)
    return e


def addUniqueEdge(g, src, dst, **attrs):
    for e in g.get_edge_list():
        es, ed = e.get_source().strip('"'), e.get_destination().strip('"')
        if es == src and ed == dst:
            return e
    e = pydot.Edge(quote(src), quote(dst), **attrs)
    g.add_edge(e)
    return e


def getParticipantNames(solverinterface):
    return [ p.attrib["name"] for p in solverinterface.findall("participant") ]


def getParticipantColor(solverinterface, blackOnly=False):
    names = getParticipantNames(solverinterface)
    colors = None
    if blackOnly:
        colors = cycle(["black"])
    else:
        colorblind = ["#0173B2", "#DE8F05", "#029E73", "#D55E00", "#CC78BC", "#CA9161", "#FBAFE4", "#949494", "#ECE133", "#56B4E9"]
        colors = cycle(colorblind)
    return dict(zip(names, colors))


def configToGraph(ast, args):
    assert(ast.tag == "precice-configuration")

    solverinterfaces = ast.findall("solver-interface")
    precice_version = -1

    if(len(solverinterfaces) == 1):
        precice_version = 2
    elif(len(solverinterfaces) == 0):
        precice_version = 3

    if(precice_version == 2):
        root = solverinterfaces[0]
    elif(precice_version == 3):
        root = ast

    g = pydot.Graph(
        layout="dot",
        splines="true",
        overlap="scale",
        compound=True,
        rankdir="LR",
    )
    dataType = {}
    meshes = {}
    participantClusterName = {}
    m2nCluster = pydot.Cluster("m2n", label=quote("Communicators"))
    g.add_subgraph(m2nCluster)
    cplCluster = pydot.Cluster("cpl", label=quote("Coupling Schemes"))
    g.add_subgraph(cplCluster)

    participantColor = getParticipantColor(root, args.no_colors)

    for elem in root.iterchildren():
        if (elem.tag.startswith("data")):
            kind = elem.tag[elem.tag.find(":")+1:]
            name = elem.attrib["name"]
            dataType[name] = kind
        elif "mesh" == elem.tag:
            name = elem.attrib["name"]
            meshes[name] = [
                use.attrib["name"] for use in elem.findall("use-data")
            ]
        elif "participant" == elem.tag:
            name = elem.attrib["name"]
            participant = pydot.Cluster(name, label=quote(name), style="bold")
            participantClusterName[name] = participant.get_name()
            color = participantColor[name]
            addNode(participant, name, color=color, shape="doubleoctagon")
            # use-mesh
            for use in elem.findall("use-mesh"):
                mesh = use.attrib["name"]
                meshname = f"{name}-{mesh}"
                provided = "provide" in use.attrib
                if provided:
                    addNode(participant, meshname, shape="cylinder", label=quote(mesh), color=color)
                else:
                    pfrom = use.attrib["from"]
                    addNode(participant, meshname, shape="cylinder", label=quote(f"{mesh}\nfrom {pfrom}"),
                            color=participantColor[pfrom], style="dashed"
                        )
            # provide-mesh
            for use in elem.findall("provide-mesh"):
                mesh = use.attrib["name"]
                meshname = f"{name}-{mesh}"
                addNode(participant, meshname, shape="cylinder", label=quote(mesh), color=color)
            # receive-mesh
            for use in elem.findall("receive-mesh"):
                mesh = use.attrib["name"]
                meshname = f"{name}-{mesh}"
                pfrom = use.attrib["from"]
                addNode(participant, meshname, shape="cylinder", label=quote(f"{mesh}\nfrom {pfrom}"),
                        color=participantColor[pfrom], style="dashed"
                        )
            # read-data
            for read in elem.findall("read-data"):
                mesh = read.attrib["mesh"]
                data = read.attrib["name"]
                if args.data_access == "full":
                    addEdge(participant, f"{name}-{mesh}", name, label=quote(data), tooltip=dataType[data], color=color)
                elif args.data_access == "merged":
                    addUniqueEdge(participant, f"{name}-{mesh}", name)
            # write-data
            for write in elem.findall("write-data"):
                mesh = write.attrib["mesh"]
                data = write.attrib["name"]
                if args.data_access == "full":
                    addEdge(participant, name, f"{name}-{mesh}", label=quote(data), tooltip=dataType[data], color=color)
                elif args.data_access == "merged":
                    addUniqueEdge(participant, name, f"{name}-{mesh}")
            # watchpoint
            for watchpoint in elem.findall("watch-point"):
                wpmesh = watchpoint.attrib["mesh"]
                wpname = watchpoint.attrib["name"]
                wpcoord = watchpoint.attrib["coordinate"]
                if not args.no_watchpoints:
                    wpnode = f"{name}-WP-{wpname}"
                    addNode(participant, wpnode, shape="note", label=quote(f"{wpname}\nat ({wpcoord})"),
                            color=color
                        )
                    addEdge(participant, wpnode, name, color=color)

            # other children
            for child in elem.iterchildren():
                # mapping
                if child.tag.startswith("mapping:"):
                    mkind = child.tag[child.tag.find(":")+1:]
                    mfrom = child.attrib["from"]
                    mto = child.attrib["to"]
                    addEdge(participant, f"{name}-{mfrom}", f"{name}-{mto}", label=quote(mkind))
                # master
                if child.tag.startswith("master:"):
                    kind = child.tag[child.tag.find(":")+1:]
                    addNode(participant, name+kind, shape="component", label=quote(kind))
            g.add_subgraph(participant)
        # m2n
        elif elem.tag.startswith("m2n"):
            kind = elem.tag[elem.tag.find(":")+1:]
            pto = elem.attrib["to"]
            pfrom = elem.attrib["from"]
            name = f"m2n-{pto}-{pfrom}"
            if args.communicators == "full":
                addNode(m2nCluster, name, shape="component", label=quote(kind))
                addEdge(g, name, pto,   lhead=participantClusterName[pto],   dir="both", color=participantColor[pto])
                addEdge(g, name, pfrom, lhead=participantClusterName[pfrom], dir="both", color=participantColor[pfrom])
            if args.communicators == "merged":
                addEdge(g, pfrom, pto, lhead=participantClusterName[pto], ltail=participantClusterName[pfrom], label=quote(kind), dir="both")

        # cpl schemes
        elif elem.tag.startswith("coupling-scheme"):
            kind = elem.tag[elem.tag.find(":")+1:]
            # Every cplscheme apart from multi
            name = "-".join(["cpl", "multi"]+[e.attrib["name"] for e in elem.findall("participant")])

            if kind == "multi":
                if args.cplschemes != "hide":
                    addNode(cplCluster, name, shape="component", label=quote(kind))
                    for other in elem.findall("participant"):
                        thisName = other.attrib["name"]
                        e = addEdge(g, name, thisName,  lhead=participantClusterName[thisName],   color=participantColor[thisName])
                        if other.get("control"):
                            e.set_taillabel("Controller")
            else:
                # Every cplscheme apart from multi
                first =  elem.find("participants").attrib["first"]
                second = elem.find("participants").attrib["second"]
                name = f"cpl-{first}-{second}"

                if args.cplschemes == "full":
                    addNode(cplCluster, name, shape="component", label=quote(kind))
                    addEdge(g, name, first,  lhead=participantClusterName[first],  taillabel=quote("first"),  color=participantColor[first])
                    addEdge(g, name, second, lhead=participantClusterName[second], taillabel=quote("second"), color=participantColor[second])
                elif args.cplschemes == "merged":
                    addUniqueEdge(g, first, second, dir="both", lhead=participantClusterName[first],  headlabel=quote("first"), ltail=participantClusterName[second], taillabel=quote("second"), label=quote(kind))

            # exchange tags
            # This is indepedant of the above
            for exchange in elem.findall("exchange"):
                mesh = exchange.attrib["mesh"]
                data = exchange.attrib["data"]
                pfrom = exchange.attrib["from"]
                pto = exchange.attrib["to"]
                if args.data_exchange == "full":
                    addEdge(g, f"{pfrom}-{mesh}", f"{pto}-{mesh}", label=quote(data), tooltip=dataType[data], color=participantColor[pfrom])
                elif args.data_exchange == "merged":
                    addUniqueEdge(g, f"{pfrom}-{mesh}", f"{pto}-{mesh}", color=participantColor[pfrom])

    return g


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout, help="The resulting dot file. Omit to output to stdout.")
    displayChoices = ['full', 'merged', 'hide']
    parser.add_argument('--data-access',   choices=displayChoices, default="full", help="Verbosity of the displayed read/write access between mesh and participant.")
    parser.add_argument('--data-exchange', choices=displayChoices, default="full", help="Verbosity of the displayed data exchange between meshes.")
    parser.add_argument('--communicators', choices=displayChoices, default="full", help="Verbosity of the displayed of communicators.")
    parser.add_argument('--cplschemes',    choices=displayChoices, default="full", help="Verbosity of the displayed of coupling schemes.")
    parser.add_argument('--no-watchpoints', action="store_true", help="Do not display watchpoints.")
    parser.add_argument('--no-colors', action="store_true", help="Disable colors in the output.")
    parser.add_argument('infile',  nargs='?', type=argparse.FileType('rb'), default=sys.stdin,  help="The XML configuration file. Omit to read from stdin.")
    return parser.parse_args()


def readBinary(streamlike):
    """
    Reading binary from sys.stdin requires to use the underlying buffer instead
    """
    try:
        return streamlike.buffer.read()
    except:
        return streamlike.read()

def main():
    args = parse_args()
    xml = parseXML(readBinary(args.infile))
    g = configToGraph(xml, args)
    args.outfile.write(g.to_string())
    # nx.drawing.nx_pydot.write_dot(g, args.outfile)


if __name__ == "__main__":
    main()
